using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using System.Linq;

namespace UnitTestProject1
{
    [TestClass]
    public class UnitTest1
    {
        public class Student
        {
            public string Фамилия { get; set; }
            public string Имя { get; set; }
            public string Отчество { get; set; }
            public string Телефон { get; set; }
            public int Код__кафедры { get; set; }
        }

        [TestClass]
        public class TestSortAndFilter
        {
            private List<Student> students;

            [TestInitialize]
            public void Setup()
            {
                // Инициализация тестовых данных
                students = new List<Student>
                {
                    new Student { Фамилия = "Иванов", Имя = "Петр", Отчество = "Игоревич", Телефон = "+7(910)123-45-68", Код__кафедры = 101 },
                    new Student { Фамилия = "Петров", Имя = "Александр", Отчество = "Владимирович", Телефон = "+7(911)234-56-78", Код__кафедры = 101 },
                    new Student { Фамилия = "Сидорова", Имя = "Елена", Отчество = "Сергеевна", Телефон = "+7(912)345-67-89", Код__кафедры = 103 },
                    new Student { Фамилия = "Смирнова", Имя = "Мария", Отчество = "Александровна", Телефон = "+7(913)456-78-90", Код__кафедры = 104 },
                    new Student { Фамилия = "Козлов", Имя = "Денис", Отчество = "Дмитриевич", Телефон = "+7(914)567-89-01", Код__кафедры = 105 },
                    new Student { Фамилия = "Новикова", Имя = "Марина", Отчество = "Владимировна", Телефон = "+7(915)678-90-12", Код__кафедры = 101 },
                    new Student { Фамилия = "Васильев", Имя = "Анна", Отчество = "Игоревна", Телефон = "+7(916)789-01-23", Код__кафедры = 102 },
                    new Student { Фамилия = "Павлов", Имя = "Максим", Отчество = "Олегович", Телефон = "+7(917)890-12-34", Код__кафедры = 103 },
                    new Student { Фамилия = "Соколова", Имя = "Екатерина", Отчество = "Сергеевна", Телефон = "+7(918)901-23-45", Код__кафедры = 104 },
                    new Student { Фамилия = "Кузнецов", Имя = "Дмитрий", Отчество = "Алексеевич", Телефон = "+7(919)012-34-56", Код__кафедры = 105 },
                    new Student { Фамилия = "Игнатьева", Имя = "Анастасия", Отчество = "Павловна", Телефон = "+7(920)123-45-67", Код__кафедры = 101 },
                    new Student { Фамилия = "Федоров", Имя = "Илья", Отчество = "Игоревич", Телефон = "+7(921)234-56-78", Код__кафедры = 102 },
                    new Student { Фамилия = "Семенова", Имя = "Алина", Отчество = "Сергеевна", Телефон = "+7(922)345-67-89", Код__кафедры = 103 },
                    new Student { Фамилия = "Казаков", Имя = "Артем", Отчество = "Александрович", Телефон = "+7(923)456-78-90", Код__кафедры = 104 },
                    new Student { Фамилия = "Морозова", Имя = "Елена", Отчество = "Дмитриевна", Телефон = "+7(924)567-89-01", Код__кафедры = 105 },
                    new Student { Фамилия = "Поляков", Имя = "Даниил", Отчество = "Иванович", Телефон = "+7(925)678-90-12", Код__кафедры = 101 },
                    new Student { Фамилия = "Захарова", Имя = "Мария", Отчество = "Сергеевна", Телефон = "+7(926)789-01-23", Код__кафедры = 102 },
                    new Student { Фамилия = "Волков", Имя = "Владимир", Отчество = "Александрович", Телефон = "+7(927)890-12-34", Код__кафедры = 103 },
                    new Student { Фамилия = "Ермакова", Имя = "Ольга", Отчество = "Игоревна", Телефон = "+7(928)901-23-45", Код__кафедры = 104 },
                    new Student { Фамилия = "Кирпичников", Имя = "Алексей", Отчество = "Андреевич", Телефон = "+7(929)012-34-56", Код__кафедры = 105 },
                    new Student { Фамилия = "Трофимова", Имя = "Ксения", Отчество = "Петровна", Телефон = "+7(930)123-45-67", Код__кафедры = 101 },
                    new Student { Фамилия = "Куликов", Имя = "Илья", Отчество = "Владимирович", Телефон = "+7(931)234-56-78", Код__кафедры = 102 },
                    new Student { Фамилия = "Савельева", Имя = "Наталья", Отчество = "Александровна", Телефон = "+7(932)345-67-89", Код__кафедры = 103 },
                    new Student { Фамилия = "Макаров", Имя = "Артем", Отчество = "Николаевич", Телефон = "+7(933)456-78-90", Код__кафедры = 104 },
                    new Student { Фамилия = "Герасимова", Имя = "Ирина", Отчество = "Олеговна", Телефон = "+7(934)567-89-01", Код__кафедры = 105 },
                    new Student { Фамилия = "Карпов", Имя = "Сергей", Отчество = "Иванович", Телефон = "+7(935)678-90-12", Код__кафедры = 101 },
                    new Student { Фамилия = "Федосеева", Имя = "Марина", Отчество = "Петровна", Телефон = "+7(936)789-01-23", Код__кафедры = 102 },
                    new Student { Фамилия = "Никитин", Имя = "Андрей", Отчество = "Игоревич", Телефон = "+7(937)890-12-34", Код__кафедры = 103 },
                    new Student { Фамилия = "Сазонова", Имя = "Елена", Отчество = "Александровна", Телефон = "+7(938)901-23-45", Код__кафедры = 104 },
                    new Student { Фамилия = "Капустин", Имя = "Иван", Отчество = "Владимирович", Телефон = "+7(939)012-34-56", Код__кафедры = 105 },
                    new Student { Фамилия = "Лебедева", Имя = "Ольга", Отчество = "Ивановна", Телефон = "+7(940)123-45-67", Код__кафедры = 101 },
                    new Student { Фамилия = "Васнецов", Имя = "Максим", Отчество = "Олегович", Телефон = "+7(941)234-56-78", Код__кафедры = 102 },
                    new Student { Фамилия = "Полякова", Имя = "Елизавета", Отчество = "Игоревна", Телефон = "+7(942)345-67-89", Код__кафедры = 103 },
                    new Student { Фамилия = "Савельев", Имя = "Артур", Отчество = "Алексеевич", Телефон = "+7(943)456-78-90", Код__кафедры = 104 },
                    new Student { Фамилия = "Миронова", Имя = "Кристина", Отчество = "Андреевна", Телефон = "+7(944)567-89-01", Код__кафедры = 105 },
                    new Student { Фамилия = "Краснов", Имя = "Максим", Отчество = "Александрович", Телефон = "+7(942)245-67-89", Код__кафедры = 101 },
                    new Student { Фамилия = "Федосеев", Имя = "Михаил", Отчество = "Мирославович", Телефон = "+7(910)323-45-67", Код__кафедры = 102 },
                    new Student { Фамилия = "Лукьянова", Имя = "Варвара", Отчество = "Глебовна", Телефон = "+7(911)434-56-78", Код__кафедры = 103 },
                    new Student { Фамилия = "Федотов", Имя = "Максим", Отчество = "Сергеевич", Телефон = "+7(912)245-67-89", Код__кафедры = 104 },
                    new Student { Фамилия = "Черкасов", Имя = "Пётр", Отчество = "Кириллович", Телефон = "+7(913)156-78-90", Код__кафедры = 105 },
                    new Student { Фамилия = "Тарасова", Имя = "Вероника", Отчество = "Сергеевна", Телефон = "+7(914)537-89-01", Код__кафедры = 101 },
                    new Student { Фамилия = "Шилова", Имя = "Марина", Отчество = "Владимировна", Телефон = "+7(915)628-90-12", Код__кафедры = 102 },
                    new Student { Фамилия = "Румянцев", Имя = "Максим", Отчество = "Сергеевич", Телефон = "+7(916)289-01-23", Код__кафедры = 103 },
                    new Student { Фамилия = "Полякова", Имя = "Ярослава", Отчество = "Владиславовна", Телефон = "+7(917)390-12-34", Код__кафедры = 104 },
                    new Student { Фамилия = "Трошина", Имя = "Анастасия", Отчество = "Александровна", Телефон = "+7(918)902-23-45", Код__кафедры = 105 },
                    new Student { Фамилия = "Петухова", Имя = "Анна", Отчество = "Семёновна", Телефон = "+7(919)014-34-56", Код__кафедры = 101 },
                    new Student { Фамилия = "Новикова", Имя = "Полина", Отчество = "Фёдоровна", Телефон = "+7(920)121-45-67", Код__кафедры = 102 },
                    new Student { Фамилия = "Владимирова", Имя = "Анастасия", Отчество = "Александровна", Телефон = "+7(921)224-56-78", Код__кафедры = 103 },
                    new Student { Фамилия = "Иванова", Имя = "Ксения", Отчество = "Тимуровна", Телефон = "+7(922)345-17-89", Код__кафедры = 104 },
                    new Student { Фамилия = "Тимофеев", Имя = "Антон", Отчество = "Макарович", Телефон = "+7(923)452-78-90", Код__кафедры = 105 },
                    new Student { Фамилия = "Зверев", Имя = "Даниил", Отчество = "Матвеевич", Телефон = "+7(924)567-19-01", Код__кафедры = 101 },
                    new Student { Фамилия = "Моисеев", Имя = "Богдан", Отчество = "Арсеньевич", Телефон = "+7(925)678-94-12", Код__кафедры = 102 },
                    new Student { Фамилия = "Миронова", Имя = "Полина", Отчество = "Егоровна", Телефон = "+7(926)789-01-22", Код__кафедры = 103 },
                    new Student { Фамилия = "Панина", Имя = "Ксения", Отчество = "Михайлович", Телефон = "+7(927)890-11-34", Код__кафедры = 104 },
                    new Student { Фамилия = "Кириллова", Имя = "Максим", Отчество = "Егоровна", Телефон = "+7(928)123-11-23", Код__кафедры = 104 }

                };
            }

            #region Sort Tests

            [TestMethod]
            public void TestSortByФамилияAscending()
            {
                // Сортировка по фамилии в порядке возрастания
                var sortedStudents = students.OrderBy(s => s.Фамилия).ToList();

                // Выводим весь отсортированный список для отладки
                Console.WriteLine("Отсортированный список:");
                foreach (var student in sortedStudents)
                {
                    Console.WriteLine(student.Фамилия);
                }

                // Проверяем, что каждый студент в отсортированном списке имеет фамилию, которая не больше фамилии следующего студента
                for (int i = 0; i < sortedStudents.Count - 1; i++)
                {
                    Assert.IsTrue(string.Compare(sortedStudents[i].Фамилия, sortedStudents[i + 1].Фамилия) <= 0,
                        $"Фамилия студента {sortedStudents[i].Фамилия} должна быть меньше или равна фамилии студента {sortedStudents[i + 1].Фамилия}");
                }

                // Дополнительно проверяем первый и последний студент
                Assert.AreEqual("Васильев", sortedStudents[0].Фамилия, "Первый студент должен быть Иванов");
                Assert.AreEqual("Шилова", sortedStudents[sortedStudents.Count - 1].Фамилия, "Последний студент должен быть Сидоров");
            }

            [TestMethod]
            public void TestSortByФамилияDescending()
            {
                // Сортировка по фамилии в порядке убывания
                var sortedStudents = students.OrderByDescending(s => s.Фамилия).ToList();

                // Проверка, что фамилия первого студента в списке — Сидоров (самый высокий по алфавиту)
                Assert.AreEqual("Шилова", sortedStudents[0].Фамилия);
                // Проверка, что фамилия последнего студента — Иванов
                Assert.AreEqual("Васильев", sortedStudents[sortedStudents.Count - 1].Фамилия);
            }

            #endregion

            #region Filter Tests
            [TestMethod]
            public void Test_FilterByCategory_Кафедра_математики_ReturnsOneBook()
            {
                // Применяем фильтр по кафедре с кодом 101 (например, если это правильный код)
                var filteredStudents = students.Where(s => s.Код__кафедры == 101).ToList();

                // Ожидаем, что на кафедре с кодом 101 будет 12 студентов (или правильное количество)
                Assert.AreEqual(12, filteredStudents.Count); // Ожидаем 12 студентов на кафедре с кодом 101
                Assert.IsTrue(filteredStudents.All(s => s.Код__кафедры == 101)); // Проверяем, что все студенты принадлежат кафедре с кодом 101
            }


            [TestMethod]
            public void TestFilterBySearchText()
            {
                // Применяем поиск по фамилии, имени, отчеству и телефону
                var searchTerm = "Иванов";
                var filteredStudents = students.Where(s =>
                    s.Фамилия.ToLower().Contains(searchTerm.ToLower()) ||
                    s.Имя.ToLower().Contains(searchTerm.ToLower()) ||
                    s.Отчество.ToLower().Contains(searchTerm.ToLower()) ||
                    s.Телефон.Replace("+", "").Replace(" ", "").Replace("-", "").Replace("(", "").Replace(")", "").ToLower().Contains(searchTerm.ToLower())
                ).ToList();

                Assert.AreEqual(5, filteredStudents.Count); // Ожидаем 1 студента, у которого фамилия Иванов
                Assert.AreEqual("Иванов", filteredStudents[0].Фамилия);
            }

            [TestMethod]
            public void TestSearchWithWhitespaceInput()
            {
                // Ввод пробела в поисковик
                var searchTerm = "   ";

                // Очищаем строку поиска от пробелов в начале и в конце
                searchTerm = searchTerm.Trim();

                // Применяем поиск
                var filteredStudents = students.Where(s =>
                    s.Фамилия.ToLower().Contains(searchTerm.ToLower()) ||
                    s.Имя.ToLower().Contains(searchTerm.ToLower()) ||
                    s.Отчество.ToLower().Contains(searchTerm.ToLower()) ||
                    s.Телефон.Replace("+", "").Replace(" ", "").Replace("-", "").Replace("(", "").Replace(")", "").ToLower().Contains(searchTerm.ToLower())
                ).ToList();

                // Ожидаем, что вернется весь список студентов, так как поиск по пробелам эквивалентен пустому поиску
                Assert.AreEqual(55, filteredStudents.Count); // Должно быть 3 студента
                Assert.IsTrue(filteredStudents.All(s => students.Contains(s))); // Все студенты должны быть в списке
            }


            [TestMethod]
            public void Test_FilterByCategory_Кафедра_физики_ReturnsOneBook()
            {
                // Фильтрация студентов по кафедре Физики (код кафедры 101, как пример)
                var filteredStudents = students.Where(s => s.Код__кафедры == 102).ToList();

                Assert.AreEqual(10, filteredStudents.Count); // Должно быть 10 студентов на кафедре Физики
            }

        


            [TestMethod]
            public void Test_FilterByCategory_Кафедра_информатики_ReturnsOneBook()
            {
                // Фильтрация студентов по кафедре Информатики (код кафедры 104)
                var filteredStudents = students.Where(s => s.Код__кафедры == 104).ToList();

                // Проверяем, что на кафедре Информатики будет 12 студентов
                Assert.AreEqual(12, filteredStudents.Count); // Ожидаем 12 студентов на кафедре Информатики
            }


            [TestMethod]
            public void Test_FilterByCategory_Кафедра_иностранных_языков_ReturnsOneBook()
            {
                // Фильтрация студентов по кафедре Иностранных языков (код кафедры 105)
                var filteredStudents = students.Where(s => s.Код__кафедры == 105).ToList();

                // Проверяем, что на кафедре Иностранных языков будет один студент
                Assert.AreEqual(10, filteredStudents.Count); // Должен быть один студент на кафедре Иностранных языков

            }

            [TestMethod]
            public void Test_FilterByCategory_Кафедра_биологии_ReturnsOneBook()
            {
                // Фильтрация студентов по кафедре Биологии (код кафедры 6)
                var filteredStudents = students.Where(s => s.Код__кафедры == 106).ToList();

                Assert.AreEqual(0, filteredStudents.Count); // Должен быть один студент на кафедре Биологии
            }

            [TestMethod]
            public void Test_FilterByCategory_Кафедра_химии_ReturnsOneBook()
            {
                // Фильтрация студентов по кафедре Химии (код кафедры 103)
                var filteredStudents = students.Where(s => s.Код__кафедры == 103).ToList();

                // Выводим для отладки, какие студенты попали в фильтрацию
                Console.WriteLine("Filtered students for Chemistry department:");
                foreach (var student in filteredStudents)
                {
                    Console.WriteLine($"Student: {student.Фамилия} {student.Имя} {student.Отчество}");
                }

                // Ожидаем, что на кафедре Химии будет 10 студентов
                Assert.AreEqual(11, filteredStudents.Count); // Ожидаем 10 студентов на кафедре Химии

            }


            #endregion


        }
    }
}
